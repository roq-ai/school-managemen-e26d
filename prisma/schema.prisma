generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model attendance {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime @db.Date
  status     String   @db.VarChar(255)
  user_id    String   @db.Uuid
  school_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  school     school   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model exam {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String   @db.VarChar(255)
  date           DateTime @db.Date
  total_marks    Int
  obtained_marks Int?
  user_id        String   @db.Uuid
  school_id      String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  school         school   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model fee {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount     Int
  due_date   DateTime @db.Date
  status     String   @db.VarChar(255)
  user_id    String   @db.Uuid
  school_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  school     school   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model school {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  attendance  attendance[]
  exam        exam[]
  fee         fee[]
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timetable   timetable[]
}

model timetable {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  day        String   @db.VarChar(255)
  period     Int
  subject    String   @db.VarChar(255)
  user_id    String   @db.Uuid
  school_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  school     school   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  attendance  attendance[]
  exam        exam[]
  fee         fee[]
  school      school[]
  timetable   timetable[]
}
